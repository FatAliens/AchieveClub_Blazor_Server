@page "/user/{useridparam}"
@layout MainLayout
@inject UserPageModelBuilder _modelBuilder

@if (_model != null)
{
<header>
    @* <a href="/topusers" class="exitLink">
            <i class="fa-solid fa-chevron-left"></i>
        </a>*@

    <div class="heading-wrapper">
    </div>

    <div class="userProfile">
        <div class="userImage">
            <img src="@_model.Avatar" alt="">
        </div>
        <div class="userInfo">
            <h1 class="userName">
                <span>@_model.FirstName</span>
                <span>@_model.LastName</span>
            </h1>
            <a class="userClub" href="/club/@_model.ClubId">Клуб @_model.ClubTitle.ToUpper()</a>
        </div>
    </div>
</header>

    <main>
        <div class="generalInfo">
            @if (_model.Medals.Count > 0)
            {
                <div class="medals">
                    @foreach (var medal in _model.Medals)
                    {
                        <img src=@medal.Icon class="medalIcon" />
                    }
                    <p class="sloganHint">Достижения</p>
                </div>
                <hr class="UserInfoSeparetor">
            }
            <div>
                <p class="sloganTitle">@_model.XPSum ХР</p>
                <p class="sloganHint">Общее количество опыта</p>
            </div>
            <hr class="UserInfoSeparetor">
            <div>
                <p class="sloganTitle">Заданий выполнено: @_model.CompletedAchievementsCount из @_model.AchievementsCount</p>
                <p class="sloganHint">Выполнено @_model.CompletedRatio%</p>
            </div>
        </div>
        <!------------task completed------------------------->
        @if (_model.Achivements.Count(a => a.Completed) > 0)
        {
            <h1 class="solidHeading">Выполненные </h1>

            @foreach (var achievement in _model.Achivements)
            {
                @if (achievement.Completed)
                {
                    <div class="task completedTask">
                        <img class="logoTask" src="@achievement.LogoURL" alt="">
                        <div class="aboutTask">
                            <h3 class="taskName">
                                @achievement.Title | @achievement.Xp XP
                            </h3>
                            <p class="taskDescription">
                                @achievement.Description
                            </p>
                        </div>
                        <div class="taskXP">
                            <span class="userPerscentIcon whiteText">
                                <i class="fa-solid fa-users"></i>
                            </span>
                            <p class="whiteText">
                                @((int)achievement.UsersCompleteRatio)%
                            </p>
                        </div>
                    </div>
                }

            }
        }
        <!------------task completed------------------------->
        <!------------multiple completeble task------------------------->
        @if (_model.Achivements.Count(a => a.IsMultiple) > 0)
        {
            <h1 class="solidHeading">Многоразовые</h1>

            @foreach (var achievement in _model.Achivements)
            {
                @if (achievement.IsMultiple)
                {
                    <div class="task @(achievement.Selected?"notCompletedTaskHighlighted":"completedTask")">
                        <img class="logoTask" src="@achievement.LogoURL" alt="">
                        <div class="aboutTask">
                            <h3 class="taskName">
                                @achievement.Title | @achievement.Xp XP
                            </h3>
                            <p class="taskDescription">
                                @achievement.Description
                            </p>
                        </div>
                        <div class="taskXP">
                            <span class="userPerscentIcon whiteText">
                                <i class="fa-solid fa-list-check"></i>
                            </span>
                            <p class="whiteText">
                                @achievement.CompletedCount
                            </p>
                        </div>
                    </div>
                }
            }
        }
        <!------------task completed------------------------->
        @if (_model.Achivements.Count(a => a.Completed == false) > 0)
        {
            <h1 class="solidHeading">Невыполненные </h1>

            <!---------------------Not completed------------------>
            @foreach (var achievement in _model.Achivements)
            {
                if (!achievement.Completed)
                {
                    <div class="task notCompletedTask">
                        <img class="logoTask" src="@achievement.LogoURL" alt="">
                        <div class="aboutTask">
                            <h3 class="taskName">
                                @achievement.Title | @achievement.Xp XP
                            </h3>
                            <p class="taskDescription">
                                @achievement.Description
                            </p>
                        </div>
                        <div class="taskXP">
                            <span class="userPerscentIcon blackText">
                                <i class="fa-solid fa-users"></i>
                            </span>
                            <p class="blackText">
                                @((int)achievement.UsersCompleteRatio)%
                            </p>
                        </div>
                    </div>
                }
            }
        }
        <!---------------------Not completed------------------>
    </main>
}

@code
{
    [Parameter]
    public string UserIdParam { get; set; }

    public int AchievementsCount => _model.Achivements.Count;
    public int CompletedAchievementsCount => _model.Achivements.Count(a => a.Completed);
    public int CompletedRatio => (int)(((float)CompletedAchievementsCount / (float)AchievementsCount) * 100);
    public int XPSum => _model.Achivements.Where(a => a.Completed).Sum(a => a.Xp);

    private UserPageModel _model;

    protected override void OnInitialized()
    {
        UpdateUser();
    }

    private void UpdateUser()
    {
        int id = int.Parse(UserIdParam);
        _model = _modelBuilder.Build(id);
        StateHasChanged();
    }
}