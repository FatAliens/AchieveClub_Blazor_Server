@page "/"
@layout MainLayout

@using Tewr.Blazor.FileReader

@inject UserPageModelBuilder _modelBuilder
@inject CompleteAchieveService _completeAchieveService
@inject UserLoginService _login
@inject NavigationManager _navigation
@inject ImageLoader _imageLoader
@inject AvatarChanger _avatarChanger

@inject IFileReaderService fileReaderService

@if (_model != null)
{
    <header>
        <a @onclick="Logout" class="exitLink">
            <i class="fa-solid fa-arrow-right-from-bracket fa-rotate-180"></i>
        </a>

        <div class="heading-wrapper">
        </div>

        <div class="userProfile">
            <div class="userImage">
                <img src="@_model.Avatar" alt="">
            </div>
            <div class="changePhoto">
                <MudFileUpload T="IBrowserFile" Accept=".png, .jpg, .jpeg" FilesChanged="UploadFile" MaximumFileCount="1">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="@context.Id">
                            Only image files
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </div>
            <div class="userInfo">
                <h1 class="userName">
                    <span>@_model.FirstName</span>
                    <span>@_model.LastName</span>
                </h1>
                <a class="userClub" href="/club/@_model.ClubId">Клуб @_model.ClubTitle.ToUpper()</a>
            </div>
        </div>
    </header>
    <!--Detete selected button-->
    @if (_showDeleteButton)
    {
        <button id="deleteList" class="overlayButton" @onclick=DeleteAchievementsAsync>
            <span>Отменить все</span>
        </button>
    }
    <!--Complete selected button-->
    @if (_showAcceptButton)
    {
        <button id="acceptList" class="overlayButton" @onclick=CompleteAchievementsAsync>
            <span>Подтвердить все</span>
        </button>
    }
    <main>
        <div class="generalInfo">
            @if (_model.Medals.Count > 0)
            {
                <div class="medals">
                    @foreach (var medal in _model.Medals)
                    {
                        <img src=@medal.Icon class="medalIcon" alt="@medal.Title" title="@medal.Title"/>
                    }
                    <p class="sloganHint">Достижения</p>
                </div>
                <hr class="UserInfoSeparetor">
            }
            <div>
                <p class="sloganTitle">@_model.XPSum ХР</p>
                <p class="sloganHint">Общее количество опыта</p>
            </div>
            <hr class="UserInfoSeparetor">
            <div>
                <p class="sloganTitle">Заданий выполнено: @_model.CompletedAchievementsCount из @_model.AchievementsCount</p>
                <p class="sloganHint">Выполнено @_model.CompletedRatio%</p>
            </div>
        </div>

        <!------------multiple completeble task------------------------->
        @if (_model.Achievements.Count(a => a.IsMultiple) > 0)
        {
            <h1 class="solidHeading">Многоразовые</h1>

            @foreach (var achievement in _model.Achievements)
            {
                @if (achievement.IsMultiple)
                {
                    <div class="task @(achievement.Selected?"notCompletedTaskHighlighted":"completedTask")" @onclick=@(()=>SelectAchievement(achievement))>
                        <img class="logoTask" src="@achievement.LogoURL" alt="">
                        <div class="aboutTask">
                            <h3 class="taskName">
                                @achievement.Title | @achievement.Xp XP
                            </h3>
                            <p class="taskDescription">
                                @achievement.Description
                            </p>
                        </div>
                        <div class="taskXP">
                            <span class="userPerscentIcon whiteText">
                                <i class="fa-solid fa-list-check"></i>
                            </span>
                            <p class="whiteText">
                                @achievement.CompletedCount
                            </p>
                        </div>
                    </div>
                }
            }
        }

        <!---------------------Not completed------------------>
        @if (_model.Achievements.Count(a => a.Completed == false) > 0)
        {
            <h1 class="solidHeading">Невыполненные </h1>

            @foreach (var achievement in _model.Achievements)
            {
                if (achievement.Completed == false && achievement.IsMultiple == false)
                {
                    <div class="task @(achievement.Selected?"notCompletedTaskHighlighted":"notCompletedTask")" @onclick=@(()=>SelectAchievement(achievement))>
                        <img class="logoTask" src="@achievement.LogoURL" alt="">
                        <div class="aboutTask">
                            <h3 class="taskName">
                                @achievement.Title | @achievement.Xp XP
                            </h3>
                            <p class="taskDescription">
                                @achievement.Description
                            </p>
                        </div>
                        <div class="taskXP">
                            <span class="userPerscentIcon blackText">
                                <i class="fa-solid fa-users"></i>
                            </span>
                            <p class="blackText">
                                @((int)achievement.UsersCompleteRatio)%
                            </p>
                        </div>
                    </div>
                }
            }
        }

        <!------------task completed------------------------->
        @if (_model.Achievements.Count(a => a.Completed) > 0)
        {
            <h1 class="solidHeading">Выполненные </h1>

            @foreach (var achievement in _model.Achievements)
            {
                @if (achievement.Completed && achievement.IsMultiple == false)
                {
                    <div class="task @(achievement.Selected?"completedTaskHighlighted":"completedTask")" @onclick=@(()=>SelectAchievement(achievement))>
                        <img class="logoTask" src="@achievement.LogoURL" alt="">
                        <div class="aboutTask">
                            <h3 class="taskName">
                                @achievement.Title | @achievement.Xp XP
                            </h3>
                            <p class="taskDescription">
                                @achievement.Description
                            </p>
                        </div>
                        <div class="taskXP">
                            <span class="userPerscentIcon whiteText">
                                <i class="fa-solid fa-users"></i>
                            </span>
                            <p class="whiteText">
                                @((int)achievement.UsersCompleteRatio)%
                            </p>
                        </div>
                    </div>
                }
            }
        }
    </main>
    <!-----------------------------------main----------------------------------------->
}

@code
{
    // [CascadingParameter] public IModalService Modal { get; set; }

    private ElementReference inputTypeFileElement;

    private UserPageModel _model;

    private bool _showAcceptButton => _model.Achievements.Any(a => a.Selected && !a.Completed);
    private bool _showDeleteButton => _model.Achievements.Any(a => a.Selected && a.Completed);

    protected override void OnAfterRender(bool firstRender)
    {
        //if (firstRender != true)
        //{
        //    if (_login.IsAuthorized == true)
        //    {
        //        int id = _login.CurrentUser.Id;
        //        _model = _modelBuilder.Build(id);
        //        StateHasChanged();
        //    }
        //}
    }

    protected override void OnInitialized()
    {
        if (_login.IsAuthorized == true)
        {
            int id = _login.CurrentUser.Id;
            _model = _modelBuilder.Build(id);
            StateHasChanged();
        }
    }

    private void SelectAchievement(UserPageAchieveItem Achievement)
    {
        Achievement.Selected = !Achievement.Selected;
    }

    private async Task CompleteAchievementsAsync()
    {
        // var selectedAchievements = _model.Achievements.Where(a => a.Selected && a.Completed == false).ToList();
        // var parameters = new ModalParameters();
        // parameters.Add("UserFullName", _model.FullName);
        // parameters.Add("AchieveTitle", selectedAchievements.Select(a => a.Title).Aggregate((a1, a2) => a1 + ", " + a2));
        // var modalInstance = Modal.Show<AdminKeyModal>("Передайте устройство тренеру для подтверждения выполнения!", parameters);
        // var result = await modalInstance.Result;

        // if (!result.Cancelled)
        // {
        //     string adminKey = (string)result.Data;
        //     var completeAchieveParams = new CompleteAchieveParams()
        //         {
        //             UserId = _model.Id,
        //             AchievementsId = selectedAchievements.Select(a => a.Id).ToList(),
        //             SupervisorKey = adminKey
        //         };
        //     try
        //     {
        //         _completeAchieveService.CompleteMultiple(completeAchieveParams);
        //     }
        //     catch (Exception ex)
        //     {
        //         Console.WriteLine(ex.Message);
        //     }

        //     _model = _modelBuilder.Build(_model.Id);
        //     StateHasChanged();
        // }
    }

    private async Task DeleteAchievementsAsync()
    {
        // var selectedAchievements = _model.Achievements.Where(a => a.Selected && a.Completed == true).ToList();
        // var parameters = new ModalParameters();
        // parameters.Add("UserFullName", _model.FullName);
        // parameters.Add("AchieveTitle", selectedAchievements.Select(a => a.Title).Aggregate((a1, a2) => a1 + ", " + a2));
        // var modalInstance = Modal.Show<AdminKeyModal>("Передайте устройство тренеру для отмены выполнения!", parameters);
        // var result = await modalInstance.Result;

        // if (!result.Cancelled)
        // {
        //     string supervisorKey = (string)result.Data;
        //     var completeAchieveParams = new CompleteAchieveParams()
        //         {
        //             UserId = _model.Id,
        //             AchievementsId = selectedAchievements.Select(a => a.Id).ToList(),
        //             SupervisorKey = supervisorKey
        //         };
        //     try
        //     {
        //         _completeAchieveService.DeleteMultiple(completeAchieveParams);
        //     }
        //     catch (Exception ex)
        //     {
        //         Console.WriteLine(ex.Message);
        //     }

        //     _model = _modelBuilder.Build(_model.Id);
        //     StateHasChanged();
        // }
    }

    private async Task Logout()
    {
        await _login.Logout();
        _navigation.NavigateTo("/login");
    }

    private async Task UploadFile(IBrowserFile file)
    {
        _model.Avatar = await _imageLoader.CreateImage(file, "avatars");
    }

    // private async Task LoadFiles()
    // {
    //     try
    //     {
    //         var files = await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync();
    //         var file = files.First();
    //         string avatarPath = await _imageLoader.CreateImage(file, "avatars");

    //         if (_avatarChanger.ChangeAvatarById(_model.Id, avatarPath))
    //         {
    //             _model.Avatar = avatarPath;
    //         }
    //         else
    //         {
    //             _model.Avatar = @"https://icon-library.com/images/error-icon-png/error-icon-png-15.jpg";
    //         }
    //         StateHasChanged();
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine(ex.Message);
    //     }
    // }
}