@page "/admin"

@inject AdminLoginService _login

@inject IAdminRepository _adminRepo
@inject ISupervisorRepository _supervisorRepo
@inject IAchieveRepository _AchieveRepo
@inject IClubRepository _clubRepo
@inject IUserRepository _userRepo
@inject IMedalRepository _medalRepo
@inject IUserMedalRepository _usersMedalRepo
@inject MedalService _medalService

@inject ClubNamesService _clubNamesService

@inject ChangeUserPasswordService _changePassword

@inject NavigationManager _nav

@if (_login.CurrentAdmin != null)
{
    <h1>Admin: @_login.CurrentAdmin.Name</h1>
}
else
{
    _nav.NavigateTo("/login");
}

@if (_achieves != null)
{
    @if (_achieves.Any())
    {
        <h3>Достижения</h3>
        @foreach (var achieve in _achieves)
        {
            <div class="rows">
                <div class="columns">
                    <p>#@(_achieves.IndexOf(achieve)+1)</p>
                    <input placeholder="Название" type="text" @bind=achieve.Title width="450" />
                    <button @onclick="()=>EditAchieve(achieve)">Сохранить</button>
                    <button @onclick="()=>DeleteAchieve(achieve)">Удалить</button>
                </div>
                <textarea placeholder="Описание" type="text" @bind=achieve.Description rows=2 />
                <input placeholder="Количество опыта" type="text" @bind=achieve.XpString />
                <input placeholder="URL иконки" type="text" @bind=achieve.LogoURL />
                <p>
                    <input type="checkbox" id="multi" @bind=achieve.IsMultiple />
                    <label for="multi">Многоразовая или нет</label>
                </p>
            </div>
        }
    }
    else
    {
        <h3>Список достижений пуст!</h3>
    }
    <button @onclick=AddAchieve>Добавить</button>
    <button @onclick=EditAllAchievements>Сохранить все</button>
    <hr />
}
else
{
    <h3>Загрузка достижений...</h3>
}

@if (_admins != null)
{
    <button @onclick=AddAdmin>Добавить</button>
    @if (_admins.Any())
    {
        <h3>Администраторы</h3>
        @foreach (var admin in _admins)
        {
            <div class="rows">
                <div class="columns">
                    <p>#@admin.Id</p>
                    <input placeholder="Полное имя" type="text" @bind=admin.Name />
                    <input placeholder="Пароль" type="text" @bind=admin.Password />
                </div>
                <div class="columns">
                    <button @onclick="()=>EditAdmin(admin)">Сохранить</button>
                    <button @onclick="()=>DeleteAdmin(admin)">Удалить</button>
                </div>
                <hr />
            </div>
        }
    }
    else
    {
        <h3>Список администраторов пуст!</h3>
    }
}
else
{
    <h3>Загрузка списка администраторов...</h3>
}

@if (_supervisers != null)
{
    @if (_supervisers.Any())
    {
        <h3>Тренера</h3>
        @foreach (var superviser in _supervisers)
        {
            <div class="rows">
                <div class="columns">
                    <p>#@(_supervisers.IndexOf(superviser)+1)</p>
                    <input placeholder="Имя" type="text" @bind=superviser.Name width="450" />
                    <button @onclick="()=>EditSupervisor(superviser)">Сохранить</button>
                    <button @onclick="()=>DeleteSupervisor(superviser)">Удалить</button>
                </div>
                <input placeholder="Ключ" type="text" @bind=superviser.Key />
            </div>
        }
    }
    else
    {
        <h3>Список тренеров пуст!</h3>
    }
    <button @onclick=AddSupervisor>Добавить</button>
    <button @onclick=EditAllSupervisers>Сохранить все</button>
    <hr />
}
else
{
    <h3>Загрузка тренеров...</h3>
}

@if (_clubs != null)
{
    <button @onclick=AddClub>Добавить</button>
    @if (_admins.Any())
    {
        <h3>Клубы</h3>
        @foreach (var club in _clubs)
        {
            <div class="rows">
                <div class="columns">
                    <p>#@club.Id</p>
                    <input placeholder="Название" type="text" @bind=club.Title />
                    <input placeholder="Описание" type="text" @bind=club.Description />
                    <input placeholder="Адрес" type="text" @bind=club.Address />
                    <input placeholder="Логотип" type="url" @bind=club.LogoURL />
                    <input placeholder="Количество пользователей" type="number" @bind=club.UsersCount />
                </div>
                <div class="columns">
                    <button @onclick="()=>EditClub(club)">Сохранить</button>
                    <button @onclick="()=>DeleteClub(club)">Удалить</button>
                </div>
                <hr />
            </div>
        }
    }
    else
    {
        <h3>Список клубов пуст!</h3>
    }
}
else
{
    <h3>Загрузка списка клубов...</h3>
}

@if (_users != null)
{
    <button @onclick=AddUser>Добавить</button>
    @if (_users.Any())
    {
        <h3>Пользователи</h3>
        @foreach (var user in _users)
        {
            <div class="rows">
                <div class="columns">
                    <p>#@user.Id</p>
                    <input placeholder="Имя" type="text" @bind=user.FirstName />
                    <input placeholder="Фамилия" type="text" @bind=user.LastName />
                    <input placeholder="Email" type="text" @bind=user.Email />
                    <input placeholder="Аватар" type="text" @bind=user.Avatar />
                    <select @bind="user.ClubRefId">
                        @if (_clubNames != null)
                        {
                            @foreach (var clubName in _clubNames)
                            {
                                <option value="@clubName.Id">@clubName.Title</option>
                            }
                        }
                    </select>
                    <br>
                    <div class="columns">
                        <div style="background-color:lightgray;padding:10px">
                            <input placeholder="Новый пароль" type="text" @bind=_newPassword />
                            <button @onclick="()=>ChangeUserPassword(user.Id)">Установить</button>
                            <button @onclick="ClearNewPassword">Отменить</button>
                        </div>
                    </div>
                </div>
                <div class="columns">
                    <button @onclick="()=>EditUser(user)">Сохранить</button>
                    <button @onclick="()=>DeleteUser(user)">Удалить</button>
                </div>
                <hr />
            </div>
        }
    }
    else
    {
        <h3>Список пользователей пуст!</h3>
    }
}
else
{
    <h3>Загрузка списка пользователей...</h3>
}






@if (_medals != null)
{
    <button @onclick=AddMedals>Добавить</button>
    <button @onclick=DeleteAllMedals>Удалить все медали</button>
    <button @onclick="CalculateMedals">Разрадать медали пользователям</button>
    @if (_medals.Any())
    {
        <h3>Медали</h3>
        @foreach (var medal in _medals)
        {
            <div class="rows">
                <div class="columns">
                    <p>#@medal.Id</p>
                    <input placeholder="Название" type="text" @bind=medal.Title />
                    <input placeholder="Картинка" type="text" @bind=medal.Icon />
                </div>
                <div class="columns">
                    <button @onclick="()=>EditMedals(medal)">Сохранить</button>
                    <button @onclick="()=>DeleteMedals(medal)">Удалить</button>
                </div>
                <hr />
            </div>
        }
    }
    else
    {
        <h3>Список медалей пуст!</h3>
    }
}
else
{
    <h3>Загрузка списка медалей...</h3>
}





@code
{
    private List<Achievement> _achieves;
    private List<Admin> _admins;
    private List<Supervisor> _supervisers;
    private List<Data.DTO.Club> _clubs;
    private List<User> _users;
    private List<ClubNameInfo> _clubNames;
    private List<Medal> _medals;

    private string _newPassword;

    protected override void OnInitialized()
    {
        GetAchievements();
        GetAdmins();
        GetSupervisors();
        GetClubs();
        GetUsers();
        GetMedals();
        GetClubNames();
    }

    private void ChangeUserPassword(int userId)
    {
        if (_changePassword.ChangePassword(userId, _newPassword))
        {
            ClearNewPassword();
        }
    }

    private void ClearNewPassword()
    {
        _newPassword = "";
    }

    private void GetClubNames()
    {
        _clubNames = _clubNamesService.GetAll();
    }

    private void CalculateMedals()
    {
        _medalService.CalculateMedals();
    }

    private void DeleteAllMedals()
    {
        _usersMedalRepo.GetAll().ForEach(m => _usersMedalRepo.Delete(m.Id));
    }

    #region AchieveCRUD

    private void GetAchievements()
    {
        _achieves = _AchieveRepo.GetAll();
    }

    private void AddAchieve()
    {
        var newAchieve = new Achievement
        {
            Title = "Название",
            Description = "Описание",
            Xp = 0,
            LogoURL = "/image/temp.jpg" //нян-кэт
        };
        _AchieveRepo.Insert(newAchieve);

        GetAchievements();
    }

    private void EditAllAchievements()
    {
        foreach (var achieve in _achieves)
        {
            EditAchieve(achieve);
        }
    }

    private void EditAchieve(Achievement Achieve)
    {
        if (_AchieveRepo.Update(Achieve))
        {
            UpdateAchievement(Achieve.Id);
        }
        else
        {
            GetAchievements();
        }

    }

    private void UpdateAchievement(int id)
    {
        var updatebleAchieve = _achieves.Where(a => a.Id == id).FirstOrDefault();
        if (updatebleAchieve != null)
        {
            updatebleAchieve = _AchieveRepo.GetById(id);
        }
        else
        {
            GetAchievements();
        }
    }

    private void DeleteAchieve(Achievement Achieve)
    {
        _AchieveRepo.Delete(Achieve.Id);

        GetAchievements();
    }
    #endregion AchieveCRUD

    #region AdminCRUD

    private void GetAdmins()
    {
        _admins = _adminRepo.GetAll();
    }

    private void AddAdmin()
    {
        var newAdmin = new Admin
        {
            Name = "Полное имя",
            Password = "Пароль"
        };

        _adminRepo.Insert(newAdmin);

        GetAdmins();
    }

    private void EditAdmin(Admin admin)
    {
        _adminRepo.Update(admin);

        GetAdmins();
    }

    private void DeleteAdmin(Admin admin)
    {
        _adminRepo.Delete(admin.Id);

        GetAdmins();
    }

    #endregion AdminCRUD

    #region SupervisorCRUD

    private void GetSupervisors()
    {
        _supervisers = _supervisorRepo.GetAll();
    }

    private void AddSupervisor()
    {
        var newSupervisor = new Supervisor
        {
            Name = "Полное имя",
            Key = "Ключ"
        };

        _supervisorRepo.Insert(newSupervisor);

        GetSupervisors();
    }

    private void EditAllSupervisers()
    {
        foreach (var supervisor in _supervisers)
        {
            EditSupervisor(supervisor);
        }
    }

    private void EditSupervisor(Supervisor supervisor)
    {
        if (_supervisorRepo.Update(supervisor))
        {
            UpdateSuperviser(supervisor.Id);
        }
        else
        {
            GetSupervisors();
        }

    }

    private void UpdateSuperviser(int id)
    {
        var updatebleSupervisor = _supervisers.Where(a => a.Id == id).FirstOrDefault();
        if (updatebleSupervisor != null)
        {
            updatebleSupervisor = _supervisorRepo.GetById(id);
        }
        else
        {
            GetSupervisors();
        }
    }

    private void DeleteSupervisor(Supervisor supervisor)
    {
        _supervisorRepo.Delete(supervisor.Id);

        GetSupervisors();
    }

    #endregion SupervisorCRUD

    #region ClubsCRUD

    private void GetClubs()
    {
        _clubs = _clubRepo.GetAll();
    }

    private void AddClub()
    {
        var newClub = new Data.DTO.Club
        {
            Title = "Клуб",
            Description = "Описание клуба",
            Address = "Адрес",
            LogoURL = "image/clubs/logos/palace.png"
        };

        _clubRepo.Insert(newClub);

        GetClubs();

        GetClubNames();
    }

    private void EditClub(Data.DTO.Club club)
    {
        _clubRepo.Update(club);

        GetClubs();

        GetClubNames();
    }

    private void DeleteClub(Data.DTO.Club club)
    {
        _clubRepo.Delete(club.Id);

        GetClubs();

        GetClubNames();
    }

    #endregion ClubsCRUD

    #region UsersCRUD

    private void GetUsers()
    {
        _users = _userRepo.GetAll();
    }

    private void AddUser()
    {
        var newUser = new User
        {
            FirstName = "Имя",
            LastName = "Фамилия",
            Email = "Почта",
            Avatar = "/image/avatars/8.jpg",
            Password = "password",
            ClubRefId = 1,
        };

        _userRepo.Insert(newUser);

        GetUsers();
    }

    private void EditUser(User user)
    {
        _userRepo.Update(user);

        GetUsers();
    }

    private void DeleteUser(User user)
    {
        _userRepo.Delete(user.Id);

        GetUsers();
    }


    #endregion UsersCRUD

    #region MedalCRUD

    private void GetMedals()
    {
        _medals = _medalRepo.GetAll();
    }

    private void AddMedals()
    {
        var newMedal = new Medal
        {
            Title = "Новая медаль",
            Icon = "/image/avatars/8.jpg",
        };

        _medalRepo.Insert(newMedal);

        GetMedals();
    }

    private void EditMedals(Medal medal)
    {
        _medalRepo.Update(medal);
        GetMedals();
    }

    private void DeleteMedals(Medal medal)
    {
        _medalRepo.Delete(medal.Id);

        GetMedals();
    }


    #endregion MedalsCRUD
}